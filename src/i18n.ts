import { i18n, createInstance } from "i18next";
import { initReactI18next } from "react-i18next";
import LanguageDetector from "i18next-browser-languagedetector";
import React from "react";

const languageDetector = new LanguageDetector();

export const LANGUAGES = ["en", "ru"] as const;
export type Language = typeof LANGUAGES[number];
export const NAMESPACES = ["common"] as const;
export type I18nNamespace = typeof NAMESPACES[number];

export const DEFAULT_LANGUAGE: Language = "ru";
export const DEFAULT_NAMESPACE: I18nNamespace = "common";

const enTranslation = {
  meta: {
    title: "Easy Alphabet",
    description: "Generated by create next app",
  },
  settings: {
    title: "Text and other settings",
    textarea: "Text to transform",
    symbolsLimit: "Paragraph symbol limit",
    showHints: "Show hints",
    resetAlphabet: "Reset alphabet",
    randomAlphabet: "Mix alphabet",
    currentLanguage: "Current language: {{language}}",
    resetText: "Reset text",
  },
  footer: {
    builtBy: "Built by <0>@luixo</0>",
    inspiredBy: "Inspired by <0>Maksim Solohin</0>",
  },
  languagePicker: {
    selectLanguage: "Choose an alphabet:",
  },
  alphabet: {
    mixed: "{{name}} (mixed)",
    names: {
      "ka-ru": "georgian → russian",
      "ru-ka": "russian → georgian",
    },
  },
};

const ruTranslation: typeof enTranslation = {
  meta: {
    title: "Легкий алфавит",
    description: "Сгенерировано с помощью create-next-app",
  },
  settings: {
    title: "Текст и другие настройки",
    textarea: "Текст для перевода",
    symbolsLimit: "Количество символов на абзац",
    showHints: "Показывать подсказки",
    resetAlphabet: "Сбросить алфавит",
    randomAlphabet: "Перемешать алфавит",
    currentLanguage: "Текущий язык: {{language}}",
    resetText: "Сбросить текст",
  },
  footer: {
    builtBy: "Автор - <0>@luixo</0>",
    inspiredBy: "Оригинальная идея - <0>Максим Солохин</0>",
  },
  languagePicker: {
    selectLanguage: "Выбери алфавит:",
  },
  alphabet: {
    mixed: "{{name}} (перемешан)",
    names: {
      "ka-ru": "грузинский → русский",
      "ru-ka": "русский → грузинский",
    },
  },
};

export type ResourceType = {
  common: typeof enTranslation;
};

export const resources: Record<Language, ResourceType> = {
  en: { common: enTranslation },
  ru: { common: ruTranslation },
};

export const getI18n = (language?: Language): i18n => {
  const instance = createInstance({
    resources,
    fallbackLng: DEFAULT_LANGUAGE,
    lng: language || DEFAULT_LANGUAGE,
    supportedLngs: LANGUAGES,
    defaultNS: DEFAULT_NAMESPACE,
    interpolation: {
      escapeValue: false,
    },
  })
    .use(initReactI18next)
    .use(languageDetector);
  return instance;
};

export const I18nContext = React.createContext<i18n | null>(null);
